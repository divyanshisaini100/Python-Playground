
   
def count_palindrome(sentence):
   count = 0
   words = sentence.split()
   for word in words:
      if word == word[::-1]:
         count += 1
   return count           

def count_words(sentence):
   return len(sentence.split())

def count_words_with_chars_repeated(sentence):
   words = sentence.split()
   count = 0
   for word in words:
      chars = [char for char in word]
      if len(chars) != len(set(chars)):
         count += 1
   return count    

def words_with_max_len(sentence):   
   words = sentence.split()
   max_len = max(map(len, words))
   max_len_words = {word for word in words if len(word) == max_len}
   return max_len_words

def process_sentence(sentence, task):
   if task == 'count_palindrome':
      return count_palindrome(sentence)
   if task == 'count_words':
      return count_words(sentence)
   if task == 'count_words_with_chars_repeated':
      return count_words_with_chars_repeated(sentence)
   if task == 'words_with_max_len':
      return words_with_max_len(sentence)
   raise ValueError('Task Not Defined')

sentence = input()
print(process_sentence(sentence,'count_palindrome'))
print(process_sentence(sentence,'count_words'))
print(process_sentence(sentence,'count_words_with_chars_repeated'))
print(process_sentence(sentence,'words_with_max_len'))


#NOTE: MORE EFFICIENT AND PRECISE CODE FOR ALL ABOVE:

def process_sentence1(sentence, task):

    words = sentence.split()
    if task == 'count_words':
        return len(words)
    elif task == 'count_palindromes':
        return sum(1 for word in words if word == word[::-1])
    elif task == 'count_words_with_repeated_chars':
        return sum(1 for word in words if len(word) != len(set(word)))
    elif task == 'words_with_max_len':
        max_len = max(map(len, words))
        max_len_words = {word for word in words if len(word) == max_len}
        return max_len_words 